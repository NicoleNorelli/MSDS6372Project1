step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
str(employeeData)
train.control <- trainControl(method = "cv", number = 5)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
?train
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
?train
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
library(GGally)
employeeData %>% select(Gender)
employeeData %>% dplyr::select(Gender)
employeeData %>% dplyr::select(HourlyRate, MonthlyIncome, MonthlyRate,PercentSalaryHike)+
ggpairs()
employeeData %>% dplyr::select(HourlyRate, MonthlyIncome, MonthlyRate,PercentSalaryHike)%>%
ggpairs()
#Does more years in the company result in higher MonthlyIncome?
employeeData%>% dplyr::select(YearsAtCompany,MonthlyIncome,JobRole)%>%
ggplot(aes(x=YearsAtCompany,y=MonthlyIncome,color=JobRole))+
geom_point()
#Does more years in the company result in higher MonthlyIncome?
employeeData%>% dplyr::select(YearsAtCompany,MonthlyIncome,JobRole)%>%
ggplot(aes(x=YearsAtCompany,y=MonthlyIncome,color=JobRole))+
geom_point()+
geom_smooth(method='lm',formula=y~x)
#Does more years in the company result in higher MonthlyIncome?
employeeData%>% dplyr::select(YearsAtCompany,MonthlyIncome,JobRole)%>%
ggplot(aes(x=YearsAtCompany,y=MonthlyIncome,color=JobRole))+
geom_point()+
geom_smooth(method='lm',formula=y~x) + ggtitle("MonthlyIncome vs Years At Company across different Job Roles")+
xlab("Years At Company")+ylab("Monthly Income")
step.model$finalModel
#Loading libraries needed
library(tidyverse)
library(ggplot2)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
#See which column has only unique value
sapply(employeeData,function(col) length(unique(col)))
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
#Convert some values into factors
cols.to.factor = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
employeeData[cols.to.factor] = lapply(employeeData[cols.to.factor],factor)
str(employeeData)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Load NB libraries
library(e1071)
library(lattice)
library(caret)
library(mlbench)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
summary(step.model$finalModel)
#load in CaseStudy2CompSet No Salary.csv to predict monthly salary
noSalary = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2CompSet No Salary.csv",header = TRUE)
cols.to.factor3 = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
noSalary[cols.to.factor] = lapply(noSalary[cols.to.factor],factor)
prediction.monthlyS = predict(step.model,noSalary)
prediction.monthlyS
noSalary$MonthlyIncome = prediction.monthlyS
results1 = data.frame(noSalary$ID,noSalary$MonthlyIncome)
head(results1)
results1 = noSalary%>% dplyr::select(ID,MonthlyIncome)
#Write results1 to CaseStudy2CompSet No Salary.csv
write.csv(results1,"Case2PredictionsYU Salary.csv",row.names = FALSE)
library(MASS)
#Build the model with internel verfication
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
set.seed(11)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(12)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(13)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(14)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(15)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(16)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(17)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(18)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(19)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(20)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(21)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(22)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(23)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
set.seed(24)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
#load in CaseStudy2CompSet No Salary.csv to predict monthly salary
noSalary = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2CompSet No Salary.csv",header = TRUE)
cols.to.factor3 = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
noSalary[cols.to.factor] = lapply(noSalary[cols.to.factor],factor)
prediction.monthlyS = predict(step.model,noSalary)
prediction.monthlyS
noSalary$MonthlyIncome = prediction.monthlyS
results1 = noSalary%>% dplyr::select(ID,MonthlyIncome)
#Write results1 to CaseStudy2CompSet No Salary.csv
write.csv(results1,"Case2PredictionsYU Salary.csv",row.names = FALSE)
#Loading libraries needed
library(tidyverse)
library(ggplot2)
#Loading in Employee data
employeeData = read.csv("/Users/mingyang/Desktop/SMU/DoingDS_Fall2020/CaseStudy2DDS/CaseStudy2-data.csv",header = TRUE)
#Delete column that has only one unique value
to.be.deleted = which(sapply(employeeData,function(col) length(unique(col))==1))
employeeData = employeeData[,-to.be.deleted]
#Convert some values into factors
cols.to.factor = c("Attrition","BusinessTravel","Department","EducationField","EnvironmentSatisfaction",
"Gender","JobInvolvement","JobLevel","JobRole","JobSatisfaction","MaritalStatus","NumCompaniesWorked",
"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
employeeData[cols.to.factor] = lapply(employeeData[cols.to.factor],factor)
#Load in libraries
library(lattice)
library(caret)
library(mlbench)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Build the model with internel verfication
set.seed(24)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
summary(step.model$finalModel)
#B Lag(10)
x2 = c(2.2,1,1.1,2.2,0,-0.8,-2.2,1,1,2,0,-2,-1.8,-1.5,-1.8)
y2 = c(0.5,0.5,-0.4,-0.3,-0.8,0.4,0,-2.2,0.9,1.2,0.5,-1,-1,0,0)
df2 = data.frame(x2,y2)
plot(df2)
#A Lag(10)
x3 = c(-1,0,-1.5,0,2,-0.8,-8,-4,-2,-1,2,0,-3,4,3,-3,-4.5,-6)
y3 = c(0,1,1.8,1,1,-3,-4,-2,-1,2,0,-0.2,3,3,1,-4.5,-4,-4)
df3 = data.frame(x3,y3)
plot(df3)
#B Lag(10)
x2 = c(2.2,1,1.1,2.2,0,-0.8,-2.2,1,1,2,0,-2,-1.8,-1.5,-1.8)
y2 = c(0.5,0.5,-0.4,-0.3,-0.8,0.4,0,-2.2,0.9,1.2,0.5,-1,-1,0,0)
df2 = data.frame(x2,y2)
plot(df2)
#C Lag(1)
x4 = c(6,0,-4,-7,-10,-10,-8,-6,-5,-2,-5.2,-4.9,0,2,4,5.2,4.8,3)
y4 = c(0,-4,-7,-10,-10,-8,-6,-5,-2,0.5,-4.9,0,2,4,5.2,4.8,3,0)
df4 = data.frame(x4,y4)
plot(df4)
#A Lag(10)
x3 = c(-1,0,-1.5,0,2,-0.8,-8,-4,-2,-1,2,0,-3,4,3,-3,-4.5,-6)
y3 = c(0,1,1.8,1,1,-3,-4,-2,-1,2,0,-0.2,3,3,1,-4.5,-4,-4)
df3 = data.frame(x3,y3)
plot(df3)
#C Lag(1)
x4 = c(6,0,-4,-7,-10,-10,-8,-6,-5,-2,-5.2,-4.9,0,2,4,5.2,4.8,3)
y4 = c(0,-4,-7,-10,-10,-8,-6,-5,-2,0.5,-4.9,0,2,4,5.2,4.8,3,0)
df4 = data.frame(x4,y4)
plot(df4)
#C Lag(7)
x4 = c(6,0,-10,0,9,-5,10,10,5,5,-5,-5,5)
y4 = c(-6,-5,0,5,-15,5,-15,-5,-3,0,8,0,-3)
df4 = data.frame(x4,y4)
plot(df4)
#A Lag(10)
x3 = c(-1,0,-1.5,0,2,-0.8,-8,-4,-2,-1,2,0,-3,4,3,-3,-4.5,-6)
y3 = c(0,1,1.8,1,1,-3,-4,-2,-1,2,0,-0.2,3,3,1,-4.5,-4,-4)
df3 = data.frame(x3,y3)
plot(df3)
#C Lag(1)
x4 = c(6,0,-4,-7,-10,-10,-8,-6,-5,-2,-5.2,-4.9,0,2,4,5.2,4.8,3)
#A Lag(10)
x3 = c(-1,0,-1.5,0,2,-0.8,-8,-4,-2,-1,2,0,-3,4,3,-3,-4.5,-6)
y3 = c(0,1,1.8,1,1,-3,-4,-2,-1,2,0,-0.2,3,3,1,-4.5,-4,-4)
df3 = data.frame(x3,y3)
plot(df3)
#B Lag(10)
x2 = c(2.2,1,1.1,2.2,0,-0.8,-2.2,1,1,2,0,-2,-1.8,-1.5,-1.8)
y2 = c(0.5,0.5,-0.4,-0.3,-0.8,0.4,0,-2.2,0.9,1.2,0.5,-1,-1,0,0)
df2 = data.frame(x2,y2)
plot(df2)
library(tidyverse)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# You need to adjust the work environment to run this code
setwd("/Users/mingyang/Desktop/SMU/Applied Statistics/MSDS6372Project1")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
library(tidyverse)
# You need to adjust the work environment to run this code
setwd("/Users/mingyang/Desktop/SMU/Applied Statistics/MSDS6372Project1")
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Tesla HP with mean HP found online of 510
#CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
#
summary(CarData)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing FIAT 500e NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="FIAT"&is.na(CarData$Engine.HP),111,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Lincoln Continental HP NA value vased on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Lincoln"&is.na(CarData$Engine.HP),345,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Ford Escape HP NA value vased on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Ford"&is.na(CarData$Engine.HP),210,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Honda Fit EV HP NA value vased on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Honda"&is.na(CarData$Engine.HP),123,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Mitsubishi i-MiEV HP NA value vased on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Mitsubishi"&is.na(CarData$Engine.HP),66,CarData$Engine.HP)
# Fixing Chevrolet  Impala HP NA value vased on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Chevrolet"&is.na(CarData$Engine.HP),305,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Nissan Leaf HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Nissan"&is.na(CarData$Engine.HP),177,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Tesla Model S HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Tesla"&is.na(CarData$Engine.HP),503,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Mercedes-Benz M-Class S HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Mercedes-Benz"&is.na(CarData$Engine.HP),350,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Toyota RAV4 HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Toyota"&is.na(CarData$Engine.HP),203,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Fixing Kia Soul EV HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Kia"&is.na(CarData$Engine.HP),109,CarData$Engine.HP)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Look at summary of data
summary(CarData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Tesla HP with mean HP found online of 510
#CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
# Fixing FIAT 500e HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="FIAT"&is.na(CarData$Engine.HP),111,CarData$Engine.HP)
# Fixing Lincoln Continental HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Lincoln"&is.na(CarData$Engine.HP),345,CarData$Engine.HP)
# Fixing Ford Escape HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Ford"&is.na(CarData$Engine.HP),210,CarData$Engine.HP)
# Fixing Honda Fit EV HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Honda"&is.na(CarData$Engine.HP),123,CarData$Engine.HP)
# Fixing Mitsubishi i-MiEV HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Mitsubishi"&is.na(CarData$Engine.HP),66,CarData$Engine.HP)
# Fixing Chevrolet  Impala HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Chevrolet"&is.na(CarData$Engine.HP),305,CarData$Engine.HP)
# Fixing Nissan Leaf HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Nissan"&is.na(CarData$Engine.HP),177,CarData$Engine.HP)
# Fixing Tesla Model S HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Tesla"&is.na(CarData$Engine.HP),503,CarData$Engine.HP)
# Fixing Mercedes-Benz M-Class S HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Mercedes-Benz"&is.na(CarData$Engine.HP),350,CarData$Engine.HP)
# Fixing Toyota RAV4 HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Toyota"&is.na(CarData$Engine.HP),203,CarData$Engine.HP)
# Fixing Kia Soul EV HP NA value based on research on mean Horsepower
CarData$Engine.HP = ifelse(CarData$Make=="Kia"&is.na(CarData$Engine.HP),109,CarData$Engine.HP)
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A (Note: Performance column will be handled individually becuase of presence of High-Performance)
marketCat = c("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Flex Fuel","Hatchback","Hybrid","N/A")
marketCat = data.frame(marketCat)
# Add each Market Category as column
CarData['Crossover'] <- NA
CarData['Diesel'] <- NA
CarData['Exotic'] <- NA
CarData['Luxury'] <- NA
CarData['High-Performance'] <- NA
CarData['Factory Tuner'] <- NA
CarData['Performance'] <- NA
CarData['Flex Fuel'] <- NA
CarData['Hatchback'] <- NA
CarData['Hybrid'] <- NA
CarData['N/A'] <- NA
str(CarData)
# Use For loop to fill in Yes/No to each Market Category column
for(j in 1:dim(marketCat)[1]){
CarData[marketCat[j,1]] = ifelse(grepl(marketCat[j,1],CarData$Market.Category),"Yes","No")
}
# Performance is being handled individually...
CarData$Performance = ifelse(grepl("Performance",CarData$Market.Category)&(!grepl("High-Performance",CarData$Market.Category)),"Yes","No")
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style","Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Adjust column names - get ride of - and space in the column names to make analysis easier
# Also make column names more uniform
CarData = CarData %>%
rename(
EngineFuelType = Engine.Fuel.Type,
EngineHP = Engine.HP,
EngineCylinders = Engine.Cylinders,
TransmissionType = Transmission.Type,
DrivenWheels = Driven_Wheels,
NumberOfDoors = Number.of.Doors,
MarketCategory = Market.Category,
VehicleSize = Vehicle.Size,
VehicleStyle = Vehicle.Style,
HighwayMPG = highway.MPG,
CityMPG = city.mpg,
HighPerformance = `High-Performance`,
FactoryTuner = `Factory Tuner`,
FlexFuel = `Flex Fuel`,
N_A = `N/A`
)
# Look at summary of data
summary(CarData)
# Look at summary of data
summary(CarData$Make)
# Look at summary of data
summary(CarData$Model)
# Look at summary of data
summary(CarData$Year)
# Look at summary of data
summary(CarData$EngineFuelType)
# Look at summary of data
summary(CarData$EngineHP)
# Look at summary of data
summary(CarData$EngineCylinders)
# Look at summary of data
summary(CarData$TransmissionType)
# Look at summary of data
summary(CarData$DrivenWheels)
# Look at summary of data
summary(CarData$NumberOfDoors)
# Look at summary of data
summary(CarData$VehicleSize)
# Look at summary of data
summary(CarData$VehicleStyle)
# Look at missing Data if any
# missingData = CarData[rowSums(is.na(CarData)) > 0,]
# missingData
# dim(missingData)
write.csv(CarData,"CleanedCarData.csv",row.names = FALSE)
