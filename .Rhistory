"OverTime","PerformanceRating","RelationshipSatisfaction","StockOptionLevel","TrainingTimesLastYear",
"WorkLifeBalance")
employeeData[cols.to.factor] = lapply(employeeData[cols.to.factor],factor)
#Load in libraries
library(lattice)
library(caret)
library(mlbench)
#prepare training scheme
control = trainControl(method="repeatedcv", number=10, repeats=3)
#train the model
model = train(Attrition~.,data=employeeData,method="lvq",preProcess="scale", trControl=control)
#estimate variable importance
importance = varImp(model,scale=FALSE)
#summarize importance
print(importance)
#plot importance
plot(importance)
#Load NB libraries
library(e1071)
#select variables decided to predict Attrition
data.nb = employeeData %>% select(Attrition, OverTime, MonthlyIncome, TotalWorkingYears, YearsAtCompany, StockOptionLevel, MaritalStatus, JobLevel, YearsInCurrentRole, YearsWithCurrManager, Age, JobInvolvement, JobSatisfaction, JobRole, Department,Education, WorkLifeBalance, EnvironmentSatisfaction)
set.seed(12)
splitPercent = 0.80
trainIndex = sample(1:dim(data.nb)[1],round(splitPercent * dim(data.nb)[1]))
train.nb = data.nb[trainIndex,]
test.nb = data.nb[-trainIndex,]
model.nb = naiveBayes(Attrition~.,data=train.nb, laplace = 1)
predict.nb = predict(model.nb,test.nb)
table(predict.nb,test.nb$Attrition)
confusionMatrix(predict.nb,test.nb$Attrition)
#Load library to run stepwise regression method to choose an optimal simple model
library(MASS)
#Build the model with internel verfication
set.seed(24)
train.control <- trainControl(method = "cv", number = 10)
step.model = train(MonthlyIncome~., data=employeeData,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
#Model Accuracy
step.model$results
step.model$finalModel
summary(step.model$finalModel)
?sd
?pt
pt(0.95,49)
qt(0.95,49)
?qt
qt(0.975,473.85)
qnorm(0.975,13)
?qnorm
qnorm(0.975,0,1)
?pf
pt(1.06,1,280)
pt(5,1,280)
pf(1.06,1,280)
1- pf(1.06,1,280)
?pt
pt(2.84,14)
1-pt(2.84,14)
1-2*pt(2.84,14)
(1-pt(2.84,14))*2
qnorm(2.84,0,1)
?qnorm
qnorm(2.84)
pnorm(2.84)
1- pnorm(2.84)
2^(1.249-2.594*0.031)
pf(1.06,1,280)
qt(0.95,1000000000)
qnorm(0.95)
qt(0.95,100)
qt(0.95,30)
qt(0.025,30)
qt(0.025,30)
qnorm(0.025,30)
qnorm(0.025)
qt(0.025,100)
qt(0.025,1000000)
qt(0.025,10000000000)
qt(0.45,1000000000000)
qnorm(0.45)
qnorm(0.5)
qt(0.5,1000000000000)
qnorm(0.6)
qt(0.6,1000)
qt(0.6,100)
exp(0.1975)
9.381-8.667
0.714/9
0.079/0.619
pf(0.128,9,14)
1-pf(0.128,9,14)
1.99979-0.001126
0.0998499+0.0102828
1.99979-0.0001084
0.0998499+0.0303267
exp(1.999789181)
Exp(-0.001083732)
exp(-0.001083732)
exp(0.03032665)
231-7
?qt
qt(0.995,224)
0.200127253+0.00013768*2.598
0.200127253-0.00013768*2.598
qt(0.975,224)
1.998664+0.1101327*9.4+0.2001273*2
exp(3.424166)
1.998664+0.1101327*9.4+0.2001273*3
exp(3.634293)
exp(3.627926)
exp(3.640658)
0.010282784-0.030326651
(4+9-8.2)*10^08
sqrt(4.8*10^(-8))
qt(0.975,224)
-0.02004387+1.97*0.000219
-0.02004387-1.97*0.000219
0.714/5
9.381-9.667
9.381-8.667
0.1428/0.619
1-pf(0.231,5,14)
# You need to adjust the work environment to run this code
setwd("/Users/mingyang/Desktop/SMU/Applied Statistics/MSDS6372Project1")
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Check the reading - can later be deleted
head(CarData)
str(CarData)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
summary(CarData$Driven_Wheels)
summary(CarData$Number.of.Doors)
summary(CarData$Engine.HP)
# You need to adjust the work environment to run this code
setwd("/Users/mingyang/Desktop/SMU/Applied Statistics/MSDS6372Project1")
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Check the reading - can later be deleted
head(CarData)
str(CarData)
# Look at summary of data
summary(CarData)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
summary(CarData$Engine.HP)
summary(CarData$Engine.Cylinders)
summary(CarData$Market.Category)
summary(CarData$Vehicle.Size)
summary(CarData$Vehicle.Style)
library(tidyverse)
CarData[rowSums(is.na(CarData)) > 0,]
missingData = CarData[rowSums(is.na(CarData)) > 0,]
dim(missingData)
dim(CarData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Check the reading - can later be deleted
head(CarData)
str(CarData)
dim(CarData)
g
missingData = CarData[rowSums(is.na(CarData)) > 0,]
dim(missingData)
missingData
options('max.print'=200)
missingData
dim(missingData)
options('max.print'=100000)
missingData
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
summary(CarData$Engine.Fuel.Type)
dim(CarData)
which(CarData[rowSums(is.na(CarData)) > 0,])
library(tidyverse)
# You need to adjust the work environment to run this code
setwd("/Users/mingyang/Desktop/SMU/Applied Statistics/MSDS6372Project1")
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# In case there are NA character values
CarData[CarData=='NA'] <- NA
# Check the reading - can later be deleted
head(CarData)
str(CarData)
dim(CarData)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
summary(CarData$Engine.Fuel.Type)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Look at summary of data
summary(CarData)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
summary(CarData$Engine.Fuel.Type)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
summary(CarData$Engine.Fuel.Type)
library(tidyverse)
CarData %>% select(Engine.Fuel.Type) %>% filter(is.na())
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
summary(CarData$Engine.Fuel.Type)
CarData %>% select(Engine.Fuel.Type) %>% filter(Engine.Fuel.Type=="")
CarData %>% filter(Engine.Fuel.Type=="")
CarData %>% filter(Engine.Fuel.Type=="")
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
missingData
summary(CarData$Engine.Fuel.Type)
CarData %>% filter(Engine.Fuel.Type=="")
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
CatData %>% filter(is.na(Market.Category))
CatData %>% filter(is_na(Market.Category))
CatData %>% filter(Market.Category=="N/A")
CarData %>% filter(Market.Category=="N/A")
summary(carData$Market.Category)
summary(CarData$Market.Category)
marketNA = CarData %>% filter(Market.Category=="N/A")
dim(marketNA)
summary(CarData$Engine.Fuel.Type)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# In case there are NA character values
CarData[CarData==''] <- "regular unleaded"
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
summary(CarData$Engine.Fuel.Type)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# In case there are NA character values
CarData[CarData$Engine.Fuel.Type==''] <- "regular unleaded"
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# In case there are NA character values
CarData[Engine.Fuel.Type==''] <- "regular unleaded"
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
summary(CarData$Engine.Fuel.Type)
summary(CarData$Market.Category)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Check the reading - can later be deleted
head(CarData)
str(CarData)
dim(CarData)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
# Look at summary of data
summary(CarData)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
missingData
dim(missingData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Mazda RX model Engine Cylinders to 0
CarData$Engine.Cylinders = ifelse(CarData$Make=="Mazda"&is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Mazda RX model Engine Cylinders to 0
CarData$Engine.Cylinders = ifelse(CarData$Make=="Mazda"&is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Mazda RX model Engine Cylinders to 0
CarData$Engine.Cylinders = ifelse(CarData$Make=="Mazda"&is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
CarData %>% filter(Make=="Tesla")
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
missingData = CarData[rowSums(is.na(CarData)) > 0,]
missingData
dim(missingData)
CarData %>% filter(Make=="Tesla")
summary(CarData$Market.Category)
summary(CarData$Market.Category)
summary(CarData$Market.Category)
CarData %>% select(Market.Category)
marketCat = CarData %>% select(Market.Category)
dim(marketCat)
head(Market.Category, 100)
head(marketCat,100)
# Looking at what to do with Market.Category variable
marketCat = CarData %>% select(MSPR,Market.Category)
# Looking at what to do with Market.Category variable
marketCat = CarData %>% select(MSRP,Market.Category)
dim(marketCat)
head(marketCat,100)
summary(CarData$Market.Category)
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A
marketCat = c("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
str = "Hatchback,Factory Tuner,High-Performance";
str
dim(marketCat)
count(marketCat)
marketCat
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A
marketCat = data.frame("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
dim(marketCat)
marketCat
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A
marketCat = c("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
marketCat = dataframe(marketCat)
marketCat = data.frame(marketCat)
marketCat
marketCat[1]
marketCat[1,1]
grepl(marketCat[1,1],str)
grepl(marketCat[1,6],str)
grepl(marketCat[1,6],str)
marketCat[1,6]
marketCat
marketCat[1,1]
marketCat[1,2]
marketCat[2,2]
marketCat[2,1]
grepl(marketCat[6,1],str)
str = "Hatchback,Factory Tuner,High-Performance,N/A";
grepl(marketCat[11,1],str)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Tesla HP with mean HP found online of 510
#CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
CarData['Crossover'] <- NA
CarData['Diesel'] <- NA
CarData['Exotic'] <- NA
CarData['Luxury'] <- NA
CarData['High-Performance'] <- NA
CarData['Factory Tuner'] <- NA
CarData['Performance'] <- NA
CarData['Flex Fuel'] <- NA
CarData['Hatchback'] <- NA
CarData['Hybrid'] <- NA
CarData['N/A'] <- NA
str(CarData)
dim(CarData)[1]
CarData$Market.Category[100]
CarData$Market.Category[101]
CarData$Market.Category[1001]
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A
marketCat = c("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
marketCat = data.frame(marketCat)
marketCat
dim(marketCat)[1]
CarData["Crossover"]
CarData(1,"Crossover")
CarData("Crossover")[1]
CarData("Crossover")
CarData["Crossover"]
CarData["Crossover"][1]
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Tesla HP with mean HP found online of 510
#CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A
marketCat = c("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
marketCat = data.frame(marketCat)
str = "Hatchback,Factory Tuner,High-Performance,N/A";
grepl(marketCat[11,1],str)
# Add each Market Category as column
CarData['Crossover'] <- "No"
CarData['Diesel'] <- "No"
CarData['Exotic'] <- "No"
CarData['Luxury'] <- "No"
CarData['High-Performance'] <- "No"
CarData['Factory Tuner'] <- "No"
CarData['Performance'] <- "No"
CarData['Flex Fuel'] <- "No"
CarData['Hatchback'] <- "No"
CarData['Hybrid'] <- "No"
CarData['N/A'] <- "No"
str(CarData)
# Read in data under variable CarData
CarData = read.csv("data1.csv")
# Fixing three empty values in CarData$Engine.Fuel.Type, after research they are regular unleaded
CarData$Engine.Fuel.Type = ifelse(CarData$Engine.Fuel.Type=="","regular unleaded",CarData$Engine.Fuel.Type)
# Fixing Engine Cylinders to 0 -- Mazda RX or Electrical Vehicle
CarData$Engine.Cylinders = ifelse(is.na(CarData$Engine.Cylinders),0,CarData$Engine.Cylinders)
# Fixing Tesla Model S with Number.of.Doors missing
CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Tesla HP with mean HP found online of 510
#CarData$Number.of.Doors = ifelse(CarData$Make=="Tesla"&is.na(CarData$Number.of.Doors),4,CarData$Number.of.Doors)
# Fixing Ferrari FF 2013 Number.of.Doors to 2 -- Google research
CarData$Number.of.Doors = ifelse(CarData$Make=="Ferrari"&is.na(CarData$Number.of.Doors),2,CarData$Number.of.Doors)
#Market.Category: Crossover,Diesel,Exotic,Luxury,High-Performance,Factory Tuner,Performance,Flex Fuel,Hatchback,Hybrid,N/A
marketCat = c("Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
marketCat = data.frame(marketCat)
str = "Hatchback,Factory Tuner,High-Performance,N/A";
grepl(marketCat[11,1],str)
# Add each Market Category as column
CarData['Crossover'] <- NA
CarData['Diesel'] <- NA
CarData['Exotic'] <- NA
CarData['Luxury'] <- NA
CarData['High-Performance'] <- NA
CarData['Factory Tuner'] <- NA
CarData['Performance'] <- NA
CarData['Flex Fuel'] <- NA
CarData['Hatchback'] <- NA
CarData['Hybrid'] <- NA
CarData['N/A'] <- NA
str(CarData)
# Use For loop to fill in Yes/No
for(j in 1:dim(marketCat)[1]){
CarData[marketCat[j,1]] = ifelse(grepl(marketCat[j,1],CarData$Market.Category),"Yes","No")
}
# Convert factor variables
variables.to.factor = c("Make","Model","Engine.Fuel.Type","Transmission.Type","Driven_Wheels","Market.Category","Vehicle.Size","Vehicle.Style","Crossover","Diesel","Exotic","Luxury","High-Performance","Factory Tuner","Performance","Flex Fuel","Hatchback","Hybrid","N/A")
CarData[variables.to.factor] = lapply(CarData[variables.to.factor],factor)
# Look at summary of data
summary(CarData)
str(CarData)
summary(CarData$Market.Category)
